#!/bin/bash

# Needed before main packages can be installed
MIN_PACKAGES=(
  apt-transport-https # enables https for apt sources
  ca-certificates # use the Mozilla CA list to check TLS connections
  curl
  dirmngr # cert management for PGP, X509, etc.
  lsb-release # Linux Standard Base
)

# Main packages
PACKAGES=(
  # adduser

  # Fonts!
  fonts-dejavu
  fonts-symbola # emoji

  i3blocks # improves i3 status bar

  xinit # X-server initialization
  zsh # posix-compliant shell
  xclip # cut/paste

  # Compilation tools
  automake
  pkg-config # used with automake and autoconf

  # Linux dev libraries
  libevent-dev
  libncurses5-dev

  pandoc # markdown preview
)

# FROM REPOS/DEV
DEV_PACKAGES=(
  git
  i3
)

# FROM GIT
GIT_PACKAGES=(
  neovim # ?
  tmux # ?
)

# REQUIRES KEY
KEY_PACKAGES=(
  firefox-trunk
  yarn
)

function verify_sudo() {
  if [[ "${EUID}" -ne 0 ]]; then
    echo "Must be run as root"
    exit 1
  fi
}

function update() {
  echo "Started updating packages..."
  apt-get update
  echo "Finished updating packages"

  echo "Started upgrading packages..."
  apt-get upgrade -y
  echo "Finished upgrading packages"
}

function clean() {
  echo "Started cleaning up..."
  apt-get autoremove
  apt-get autoclean
  apt-get clean
  echo "Finished cleaning up"
}

function run_min() {
  apt-get install \
    -y \
    --no-install-recommends \
    "${MIN_PACKAGES[@]}"
}

function configure_sources() {
  local source_list="/etc/apt/source.list"

  # Keep git updated
  if grep -vq git-core "${source_list}"; then
    echo "deb http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main" >> "${source_list}"
    echo "deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu xenial main" >> "${source_list}"

    apt-key adv \
      --keyserver hkp://p80.pool.sks-keyservers.net:80 \
      --recv-keys E1DD270288B4E6030699E45FA1715D88E1DF1F24
  fi
}

function run_packages() {
  apt-get install \
    -y \
    --no-install-recommends \
    "${PACKAGES[@]}"
}

function all() {
  verify_sudo
  update

  run_min
  run_base
  run_desktop
  run_dotfiles
}

function base() {
  verify_sudo
  update

  run_min

  update

  run_base
}

function desktop() {
  verify_sudo
  update
}

function dotfiles() {
  echo unimplemented
}

function golang() {
  echo unimplemented
}

function rust() {
  echo unimplemented
}

function usage() {
  echo "setup-machine"
  echo -e "\\tSets up an Ubuntu machine for development usage\\n"
  echo "Usage:"
  echo -e "\\thelp               - displays this message"
  echo -e "\\tall                - installs or updates everything"
  echo -e "\\tbase"
  echo -e "\\tdesktop"
  echo -e "\\tdotfiles"
  echo -e "\\tgolang"
  echo -e "\\trust"
}

function main() {
  local cmd

  cmd="$1"

  case "$cmd" in
    "all") all
      ;;
    "base") base
      ;;
    "desktop") desktop
      ;;
    "dotfiles") dotfiles
      ;;
    "golang") golang
      ;;
    "node") node
      ;;
    "rust") rust
      ;;
    "usage"|*) usage
      ;;
  esac
}

main "$@"
